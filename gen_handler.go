package main

import (
	"fmt"
	"path/filepath"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	restPackage  = protogen.GoImportPath("github.com/zeromicro/go-zero/rest")
	httpxPackage = protogen.GoImportPath("github.com/zeromicro/go-zero/rest/httpx")
)

func genZeroHandler(outDir string, gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}

	rootPackage := protogen.GoImportPath(goPackage(outDir))
	packageName := rootPackage + "/internal/handler"
	svcContextPackage := rootPackage + "/internal/svc"
	g := gen.NewGeneratedFile(fmt.Sprintf("%s/internal/handler/%s_route.go", outDir, filepath.Base(file.GeneratedFilenamePrefix)), packageName)
	g.P("// Code generated by github.com/Ccheers/protoc-gen-zeroapi. DO NOT EDIT.")
	g.P()
	g.P("package handler")
	g.P()
	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the Ccheers/protoc-gen-zeroapi package it is being compiled against.")

	for _, service := range file.Services {
		genZeroService(rootPackage, svcContextPackage, file, g, service)
	}
	return g
}

func genZeroService(rootPackage, svcContextPackage protogen.GoImportPath, file *protogen.File, g *protogen.GeneratedFile, s *protogen.Service) {
	if s.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	// HTTP Server.
	sd := &service{
		Name:     s.GoName,
		FullName: string(s.Desc.FullName()),
		FilePath: file.Desc.Path(),
		Comment:  clearComment(string(s.Comments.Leading)),
	}

	for _, method := range s.Methods {
		sd.Methods = append(sd.Methods, genMethod(method, g)...)
	}
	if sd.MethodSet == nil {
		sd.MethodSet = map[string]*method{}
		for _, m := range sd.Methods {
			m := m
			sd.MethodSet[m.Name] = m
		}
	}

	g.P("func Register_", s.GoName, "Handlers(server *", restPackage.Ident("Server"), ", serverCtx *", svcContextPackage.Ident("ServiceContext"), ") {")
	generateZeroMethodList(svcContextPackage, g, sd)
	g.P("}")
	generateZeroHandler(rootPackage, svcContextPackage, g, sd)
}

func generateZeroMethodList(svcContextPackage protogen.GoImportPath, g *protogen.GeneratedFile, s *service) {
	for _, m := range s.Methods {
		g.P("server.AddRoutes(")
		g.P(restPackage.Ident("WithMiddlewares"), "(")

		// middleware
		g.P("[]", restPackage.Ident("Middleware"), "{")
		for _, name := range m.MiddlewareNames {
			g.P(svcContextPackage.Ident(name), ",")
		}
		g.P("},")

		// route
		g.P("[]", restPackage.Ident("Route"), "{")
		g.P("{")
		g.P("Method: ", fmt.Sprintf("\"%s\"", m.Method), ",")
		g.P("Path: ", fmt.Sprintf("\"%s\"", m.Path), ",")
		g.P("Handler: ", m.HandlerName(), "(serverCtx),")
		g.P("},")
		g.P("}...,")

		// end
		g.P("),")
		g.P(")")
		g.P("")
	}
}

func generateZeroHandler(rootPackage, svcContextPackage protogen.GoImportPath, g *protogen.GeneratedFile, s *service) {
	logicPath := rootPackage + "/internal/logic"
	for _, m := range s.Methods {
		g.P("func ", m.HandlerName(), "(svcCtx *", svcContextPackage.Ident("ServiceContext"), ") ", netHTTPPkg.Ident("HandlerFunc"), " {")

		g.P("return func (w ", netHTTPPkg.Ident("ResponseWriter"), ", r *", netHTTPPkg.Ident("Request"), ") {")
		g.P("var req ", m.Request)
		g.P("l := ", logicPath.Ident(fmt.Sprintf("New%sLogic", m.Name)), "(r.Context(), svcCtx)")
		g.P("resp, err := l.", m.Name, "(&req)")
		g.P("if err != nil {")
		g.P(httpxPackage.Ident("Error"), "(w, err)")
		g.P("return")
		g.P("}")
		g.P(httpxPackage.Ident("WriteJson"), "(w, http.StatusOK, resp)")
		g.P("}")

		g.P("}")
	}
}
